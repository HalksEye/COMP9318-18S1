import pandas as pdimport numpy as npimport helper################# Question 1 ################## you can call helper functions through the helper module (e.g., helper.slice_data_dim0)def read_data(filename):    df = pd.read_csv(filename, sep='\t')    # print(df)    return (df)def buc_rec_optimized(df):  # do not change the heading of the function    header = list(df)    result = pd.DataFrame(columns=header)    my_buc_rec_optimized(df, [], result)    return resultdef my_buc_rec_optimized(df, pre, result):  # help function    if df.shape[1] == 1:        pre.append(sum(helper.project_data(df, 0)))        result.loc[len(result)] = pre    else:        vals = set(helper.project_data(df, 0).values)        # print(vals,pre)        pre_copy = pre[:]        for val in vals:            pre = pre_copy[:]            sub_data = helper.slice_data_dim0(df, val)            pre.append(val)            my_buc_rec_optimized(sub_data, pre, result)        sub_data = helper.remove_first_dim(df)        pre = pre_copy[:]        pre.append("ALL")        my_buc_rec_optimized(sub_data, pre, result)    ################# Question 2 #################def v_opt_dp(x, b):  # do not change the heading of the function    mtx = [[-1 for i in range(len(x))] for j in range(b)]    dp_index = [[-1 for i in range(len(x))] for j in range(b)]    # bin 0-3    my_opt_dp(0, b - 1, x, b, mtx, dp_index)    start = dp_index[-1][0]    pre_start = start    bins = [x[:start]]    for i in range(len(dp_index) - 2, 0, -1):        start = dp_index[i][start]        bins.append(x[pre_start:start])        pre_start = start    bins.append(x[pre_start:])    return mtx, binsdef my_opt_dp(mtx_x, remain_bins, x, b, mtx, dp_index):    if (b - remain_bins - mtx_x < 2) and (len(x) - mtx_x > remain_bins):        my_opt_dp(mtx_x + 1, remain_bins, x, b, mtx, dp_index)        if (remain_bins == 0):            mtx[remain_bins][mtx_x] = np.var(x[mtx_x:]) * len(x[mtx_x:])            return        my_opt_dp(mtx_x, remain_bins - 1, x, b, mtx, dp_index)        mtx_l = [mtx[remain_bins - 1][mtx_x + 1]]        mtx_l.extend( [mtx[remain_bins - 1][i] + (i - mtx_x) * np.var(x[mtx_x:i]) for i in range(mtx_x + 2, len(x))])        # print(mtx_l)        mtx[remain_bins][mtx_x] = min(mtx_l)        dp_index[remain_bins][mtx_x] = mtx_l.index(min(mtx_l)) + mtx_x + 1# q1input_data = read_data('./asset/a_.txt')output = buc_rec_optimized(input_data)print(output)## q2# x = [3, 1, 18, 11, 13, 17]# num_bins = 4# matrix, bins = v_opt_dp(x, num_bins)# print("Bins = {}".format(bins))# print("Matrix =")# for row in matrix:#     print(row)